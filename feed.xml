<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://sonchiwon.github.io/</id><title>Sonchiwon</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2022-07-14T04:53:18+00:00</updated> <author> <name>Sonchiwon</name> <uri>https://sonchiwon.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://sonchiwon.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://sonchiwon.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Sonchiwon </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>RDKit을 활용한 ChEMBL 분자들 사이의 유사도 검색</title><link href="https://sonchiwon.github.io/posts/RDKit%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-ChEMBL-%EB%B6%84%EC%9E%90%EB%93%A4-%EC%82%AC%EC%9D%B4%EC%9D%98-%EC%9C%A0%EC%82%AC%EB%8F%84-%EA%B2%80%EC%83%89/" rel="alternate" type="text/html" title="RDKit을 활용한 ChEMBL 분자들 사이의 유사도 검색" /><published>2022-07-12T15:00:00+00:00</published> <updated>2022-07-12T15:00:00+00:00</updated> <id>https://sonchiwon.github.io/posts/RDKit%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-ChEMBL-%EB%B6%84%EC%9E%90%EB%93%A4-%EC%82%AC%EC%9D%B4%EC%9D%98-%EC%9C%A0%EC%82%AC%EB%8F%84-%EA%B2%80%EC%83%89/</id> <content src="https://sonchiwon.github.io/posts/RDKit%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-ChEMBL-%EB%B6%84%EC%9E%90%EB%93%A4-%EC%82%AC%EC%9D%B4%EC%9D%98-%EC%9C%A0%EC%82%AC%EB%8F%84-%EA%B2%80%EC%83%89/" /> <author> <name>Sonchiwon</name> </author> <summary> 분자 유사도(molecular similarity)는 화학정보학(cheminformatics) 분야에서 관심있는 연구 주제 중 하나입니다. 이 문서에서는 ChEMBL 데이터베이스에서 분자 데이터를 가져와 RDKit을 활용하여 한 쌍의 분자에 대한 유사도를 계산하는 방법을 소개합니다. 그리고 좀 더 실질적인 활용 예제로 ChEMBL 전체 데이터베이스에서 유사한 분자를 검색하는 방법을 살펴 보겠습니다. ChEMBL에서 RDKit 분자 객체 추출 ChEMBL은 약물과 유사한 특성을 가진 생리활성 분자의 화학 데이터베이스입니다. 많은 연구자들의 노력으로 손수 큐레이팅된 이 분자 데이터베이스는 다양한 포멧의 덤프 파일이 온라인에 공개되어 있습니다. 이 중 sqlite 포멧을 다운로드하고 데이터베이스를 열어 ... </summary> </entry> <entry><title>Numba로 Pairwise Jaccard score 계산 가속</title><link href="https://sonchiwon.github.io/posts/Numba%EB%A1%9C-Pairwise-Jaccard-score-%EA%B3%84%EC%82%B0-%EA%B0%80%EC%86%8D/" rel="alternate" type="text/html" title="Numba로 Pairwise Jaccard score 계산 가속" /><published>2022-06-28T15:00:00+00:00</published> <updated>2022-06-28T15:00:00+00:00</updated> <id>https://sonchiwon.github.io/posts/Numba%EB%A1%9C-Pairwise-Jaccard-score-%EA%B3%84%EC%82%B0-%EA%B0%80%EC%86%8D/</id> <content src="https://sonchiwon.github.io/posts/Numba%EB%A1%9C-Pairwise-Jaccard-score-%EA%B3%84%EC%82%B0-%EA%B0%80%EC%86%8D/" /> <author> <name>Sonchiwon</name> </author> <summary> Numba의 목적은 Python 함수의 실행 시간을 단축 시키는 것입니다. 이 문서에서는 binary array 들의 집합에서 모든 쌍의 Jaccard score 계산에 GPU 병렬 처리를 적용하여, 실행 시간이 얼마나 단축되는지 비교하겠습니다. 먼저 이전 게시물을 참고하여 scikit-learn 버전의 Pairwise Jaccard score 계산 동작을 구현해 보겠습니다. from typing import Iterable from sklearn.metrics import jaccard_score import itertools import numpy as np binarrs_number = 240 binarrs_bits = 160 binarrs = np.rando... </summary> </entry> <entry><title>Numba의 GPU 처리를 활용한 Jaccard score 계산</title><link href="https://sonchiwon.github.io/posts/Numba%EC%9D%98-GPU-%EC%B2%98%EB%A6%AC%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-Jaccard-score-%EA%B3%84%EC%82%B0/" rel="alternate" type="text/html" title="Numba의 GPU 처리를 활용한 Jaccard score 계산" /><published>2022-06-23T15:00:00+00:00</published> <updated>2022-06-23T15:00:00+00:00</updated> <id>https://sonchiwon.github.io/posts/Numba%EC%9D%98-GPU-%EC%B2%98%EB%A6%AC%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-Jaccard-score-%EA%B3%84%EC%82%B0/</id> <content src="https://sonchiwon.github.io/posts/Numba%EC%9D%98-GPU-%EC%B2%98%EB%A6%AC%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-Jaccard-score-%EA%B3%84%EC%82%B0/" /> <author> <name>Sonchiwon</name> </author> <summary> Numba는 Numpy 배열 연산을 빠르게 처리하는데 특화된 Python package 입니다. 이 문서에서는 Jaccard score 계산 예제를 통해 Numba로 GPU 처리를 활용하는 방법을 소개합니다. Jaccard score는 두 집합의 유사한 정도를 측정하는 방법 중 하나로 $J(A, B) = {| A \cup B | \div | A \cap B |}$ 로 계산되며 0과 1 사이의 값을 가집니다. Python에서 Jaccard score를 계산하는 가장 간단한 방법은 scikit-learn의 jaccard_score 함수를 호출하는 것입니다. from sklearn.metrics import jaccard_score import numpy as np a = np.ran... </summary> </entry> </feed>
